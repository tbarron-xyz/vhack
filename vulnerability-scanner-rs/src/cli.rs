use std::env;

#[derive(Debug)]
pub struct CliArgs {
    pub filter_test_type: Option<String>,
    pub target_url: String,
    pub prompts_file: String,
    pub timeout_ms: Option<u64>,
    pub output_file: String,
    pub concurrency: usize,
    pub api_max_retries: usize,
    pub generate_prompts: bool,
}

pub fn parse_args() -> CliArgs {
    let args: Vec<String> = env::args().collect();
    let mut filter_test_type: Option<String> = None;
    let mut target_url = "http://localhost:8000".to_string();
    let mut prompts_file = "./prompts.csv".to_string();
    let mut timeout_ms: Option<u64> = None;
    let mut output_file = "results.jsonl".to_string();
    let mut concurrency: usize = 1;
    let mut api_max_retries: usize = 1;
    let mut generate_prompts: bool = false;

    // Basic argument parsing
    let mut i = 1;
    while i < args.len() {
        match args[i].as_str() {
            "--test-type" | "-t" => {
                if i + 1 < args.len() {
                    filter_test_type = Some(args[i + 1].clone());
                    i += 2;
                } else {
                    eprintln!("Error: --test-type requires a value");
                    print_usage_and_exit();
                }
            }
            "--target" => {
                if i + 1 < args.len() {
                    target_url = args[i + 1].clone();
                    i += 2;
                } else {
                    eprintln!("Error: --target requires a value");
                    print_usage_and_exit();
                }
            }
            "--prompts" => {
                if i + 1 < args.len() {
                    prompts_file = args[i + 1].clone();
                    i += 2;
                } else {
                    eprintln!("Error: --prompts requires a value");
                    print_usage_and_exit();
                }
            }
            "--timeout-ms" => {
                if i + 1 < args.len() {
                    match args[i + 1].parse::<u64>() {
                        Ok(ms) => {
                            timeout_ms = Some(ms);
                            i += 2;
                        }
                        Err(_) => {
                            eprintln!("Error: --timeout-ms requires a valid number");
                            print_usage_and_exit();
                        }
                    }
                } else {
                    eprintln!("Error: --timeout-ms requires a value");
                    print_usage_and_exit();
                }
            }
            "--out" => {
                if i + 1 < args.len() {
                    output_file = args[i + 1].clone();
                    i += 2;
                } else {
                    eprintln!("Error: --out requires a value");
                    print_usage_and_exit();
                }
            }
            "--concurrency" => {
                if i + 1 < args.len() {
                    match args[i + 1].parse::<usize>() {
                        Ok(c) => {
                            concurrency = c;
                            i += 2;
                        }
                        Err(_) => {
                            eprintln!("Error: --concurrency requires a valid number");
                            print_usage_and_exit();
                        }
                    }
                } else {
                    eprintln!("Error: --concurrency requires a value");
                    print_usage_and_exit();
                }
            }
            "--api-max-retries" => {
                if i + 1 < args.len() {
                    match args[i + 1].parse::<usize>() {
                        Ok(r) => {
                            api_max_retries = r;
                            i += 2;
                        }
                        Err(_) => {
                            eprintln!("Error: --api-max-retries requires a valid number");
                            print_usage_and_exit();
                        }
                    }
                } else {
                    eprintln!("Error: --api-max-retries requires a value");
                    print_usage_and_exit();
                }
            }
            "--generate-prompts" => {
                generate_prompts = true;
                i += 1;
            }
            "--help" | "-h" => {
                print_usage_and_exit();
            }
            _ => {
                eprintln!("Unknown argument: {}", args[i]);
                print_usage_and_exit();
            }
        }
    }

    CliArgs {
        filter_test_type,
        target_url,
        prompts_file,
        timeout_ms,
        output_file,
        concurrency,
        api_max_retries,
        generate_prompts,
    }
}

fn print_usage_and_exit() -> ! {
    eprintln!("Usage: {} [OPTIONS]", env::args().next().unwrap_or("vulnerability-scanner-rs".into()));
    eprintln!();
    eprintln!("Options:");
    eprintln!("  --target <URL>                     API target URL (default: http://localhost:8000)");
    eprintln!("  --prompts <FILE>                   Prompts CSV file (default: ./prompts.csv)");
    eprintln!("  --timeout-ms <MS>                  Overall timeout in milliseconds (default: no timeout)");
    eprintln!("  --out <FILE>                       Output JSONL file (default: results.jsonl)");
    eprintln!("  --concurrency <N>                  Number of concurrent threads (default: 1)");
    eprintln!("  --api-max-retries <N>              Maximum API call retries on failure (default: 1)");
    eprintln!("  --generate-prompts                 Generate prompts.csv using OpenAI API based on vulnerability docs");
    eprintln!("  --test-type <TYPE>, -t <TYPE>      Filter prompts by test type (passwd, user_credential_extraction, financial_pii_exposure, ssn_last4_exposure, system_prompt_bypass, command_injection_process_enumeration, command_injection_file_manipulation, network_active_connections, system_user_enumeration)");
    eprintln!("  --help, -h                         Show this help message");
    eprintln!();
    eprintln!("Examples:");
    eprintln!(
        "  {}                                    Run all prompts",
        env::args().next().unwrap_or("vulnerability-scanner-rs".into())
    );
    eprintln!(
        "  {} --test-type passwd                Run only passwd prompts",
        env::args().next().unwrap_or("vulnerability-scanner-rs".into())
    );
    eprintln!(
        "  {} -t ssn_last4_exposure             Run only SSN last-4 prompts",
        env::args().next().unwrap_or("vulnerability-scanner-rs".into())
    );
    eprintln!(
        "  {} -t system_prompt_bypass           Run only system prompt bypass prompts",
        env::args().next().unwrap_or("vulnerability-scanner-rs".into())
    );
    eprintln!(
        "  {} --target http://example.com:8000 --concurrency 4  Run with custom target and 4 threads",
        env::args().next().unwrap_or("vulnerability-scanner-rs".into())
    );
    std::process::exit(1);
}
