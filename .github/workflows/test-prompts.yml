name: Test Prompts

on:
  workflow_call:
    inputs:
      scanner_model:
        required: true
        type: string
      vhack_model:
        required: true
        type: string
      generate_run_id:
        required: true
        type: string
    secrets:
      OPENROUTER_API_KEY:
        required: true

jobs:
  test-prompts:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add mask
      run: |
        echo "::add-mask::${{ secrets.OPENROUTER_API_KEY }}"

    - name: Prepare config
      run: |
        cp config.example.yaml config.yaml
        sed -i 's/your_openrouter_api_key_here/${{ secrets.OPENROUTER_API_KEY }}/' config.yaml
        sed -i 's|z-ai/glm-4.5-air:free|${{ inputs.vhack_model }}|g' config.yaml

    - name: Download prompts artifact
      uses: actions/download-artifact@v4
      with:
        name: generated-prompts
        path: vulnerability-scanner-rs
        run-id: ${{ inputs.generate_run_id }}

    - name: Download test-categories artifact
      uses: actions/download-artifact@v4
      with:
        name: test-categories
        path: vulnerability-scanner-rs
        run-id: ${{ inputs.generate_run_id }}

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Cache restore rust build target
      id: cache-target-restore
      uses: actions/cache/restore@v4
      with:
        path: vulnerability-scanner-rs/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('vulnerability-scanner-rs/src/**/*.rs') }}

    - name: Start VHACK service
      run: docker compose up --build -d

    - name: Wait for VHACK service to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/; do sleep 5; done'

    - name: Run vulnerability-scanner-rs with parallelism
      run: |
        cd vulnerability-scanner-rs
        ./target/release/vulnerability-scanner-rs \
          --concurrency 8 \
          --timeout-ms 599000 \
          --target http://localhost:8000 \
          --prompts prompts.csv \
          --out results.jsonl \
          --provider openrouter \
          --model ${{ inputs.scanner_model }}
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-scanner-results
        path: |
          vulnerability-scanner-rs/results.jsonl
          vulnerability-scanner-rs/summary.md
          vulnerability-scanner-rs/summary.csv

    - name: Stop VHACK service
      run: docker compose down

  evaluate-results:
    needs: test-prompts
    runs-on: ubuntu-latest
    steps:
      - name: Download results artifact
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-scanner-results
          path: results

      - name: Evaluate summary.csv
        run: |
          cd results
          # Extract from summary.csv (columns: elapsed_seconds,total_prompts_tested,prompts_worked)
          TIME_ELAPSED=$(tail -n1 summary.csv | cut -d',' -f1)
          TOTAL_PROMPTS=$(tail -n1 summary.csv | cut -d',' -f2)
          WORKED_PROMPTS=$(tail -n1 summary.csv | cut -d',' -f3)

          # Check conditions
          if (( $(echo "$TIME_ELAPSED > 600" | bc -l) )) || (( WORKED_PROMPTS < 5 )) || (( TOTAL_PROMPTS <= 100 )); then
            echo "Evaluation failed: Time elapsed ($TIME_ELAPSED s > 600 s) or Worked prompts ($WORKED_PROMPTS < 5) or Total prompts ($TOTAL_PROMPTS <= 100)"
            exit 1
          else
            echo "Evaluation passed: Time elapsed $TIME_ELAPSED s, Worked prompts $WORKED_PROMPTS, Total prompts tested $TOTAL_PROMPTS"
          fi